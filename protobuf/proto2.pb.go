// Code generated by protoc-gen-go.
// source: proto2.proto
// DO NOT EDIT!

/*
Package protobuf is a generated protocol buffer package.

It is generated from these files:
	proto2.proto
	proto3.proto

It has these top-level messages:
	LargerP2Define
	SmallerP2Define
	LargerP3Define
	SmallerP3Define
*/
package protobuf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LargerP2Define struct {
	Provider         *uint32 `protobuf:"varint,1,opt,name=provider" json:"provider,omitempty"`
	CompetitionId    *uint32 `protobuf:"varint,2,opt,name=competition_id,json=competitionId" json:"competition_id,omitempty"`
	EventId          *uint32 `protobuf:"varint,3,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	MarketId         *uint32 `protobuf:"varint,4,opt,name=market_id,json=marketId" json:"market_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *LargerP2Define) Reset()                    { *m = LargerP2Define{} }
func (m *LargerP2Define) String() string            { return proto.CompactTextString(m) }
func (*LargerP2Define) ProtoMessage()               {}
func (*LargerP2Define) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *LargerP2Define) GetProvider() uint32 {
	if m != nil && m.Provider != nil {
		return *m.Provider
	}
	return 0
}

func (m *LargerP2Define) GetCompetitionId() uint32 {
	if m != nil && m.CompetitionId != nil {
		return *m.CompetitionId
	}
	return 0
}

func (m *LargerP2Define) GetEventId() uint32 {
	if m != nil && m.EventId != nil {
		return *m.EventId
	}
	return 0
}

func (m *LargerP2Define) GetMarketId() uint32 {
	if m != nil && m.MarketId != nil {
		return *m.MarketId
	}
	return 0
}

type SmallerP2Define struct {
	CompetitionId    *uint32 `protobuf:"varint,2,opt,name=competition_id,json=competitionId" json:"competition_id,omitempty"`
	MarketId         *uint32 `protobuf:"varint,4,opt,name=market_id,json=marketId" json:"market_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SmallerP2Define) Reset()                    { *m = SmallerP2Define{} }
func (m *SmallerP2Define) String() string            { return proto.CompactTextString(m) }
func (*SmallerP2Define) ProtoMessage()               {}
func (*SmallerP2Define) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SmallerP2Define) GetCompetitionId() uint32 {
	if m != nil && m.CompetitionId != nil {
		return *m.CompetitionId
	}
	return 0
}

func (m *SmallerP2Define) GetMarketId() uint32 {
	if m != nil && m.MarketId != nil {
		return *m.MarketId
	}
	return 0
}

func init() {
	proto.RegisterType((*LargerP2Define)(nil), "protobuf.LargerP2Define")
	proto.RegisterType((*SmallerP2Define)(nil), "protobuf.SmallerP2Define")
}

func init() { proto.RegisterFile("proto2.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 158 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x28, 0xca, 0x2f,
	0xc9, 0x37, 0xd2, 0x03, 0x53, 0x42, 0x1c, 0x60, 0x2a, 0xa9, 0x34, 0x4d, 0xa9, 0x9b, 0x91, 0x8b,
	0xcf, 0x27, 0xb1, 0x28, 0x3d, 0xb5, 0x28, 0xc0, 0xc8, 0x25, 0x35, 0x2d, 0x33, 0x2f, 0x55, 0x48,
	0x8a, 0x0b, 0x24, 0x5d, 0x96, 0x99, 0x92, 0x5a, 0x24, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x1b, 0x04,
	0xe7, 0x0b, 0xa9, 0x72, 0xf1, 0x25, 0xe7, 0xe7, 0x16, 0xa4, 0x96, 0x64, 0x96, 0x64, 0xe6, 0xe7,
	0xc5, 0x67, 0xa6, 0x48, 0x30, 0x81, 0x55, 0xf0, 0x22, 0x89, 0x7a, 0xa6, 0x08, 0x49, 0x72, 0x71,
	0xa4, 0x96, 0xa5, 0xe6, 0x95, 0x80, 0x14, 0x30, 0x83, 0x15, 0xb0, 0x83, 0xf9, 0x40, 0x29, 0x69,
	0x2e, 0xce, 0xdc, 0xc4, 0xa2, 0xec, 0x54, 0xb0, 0x1c, 0x0b, 0xc4, 0x78, 0x88, 0x80, 0x67, 0x8a,
	0x52, 0x28, 0x17, 0x7f, 0x70, 0x6e, 0x62, 0x4e, 0x0e, 0x92, 0x6b, 0x88, 0xb4, 0x11, 0x9f, 0xb1,
	0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa7, 0x7a, 0x94, 0xad, 0xfd, 0x00, 0x00, 0x00,
}
